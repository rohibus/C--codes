/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		try 
		{
		    // your code goes here
		Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());
        String[] str = sc.nextLine().split(" ");
        
		int[] nums = new int[n];
		long total = 0;
		long min = 0;
		
		for (int i = 0; i < n; i++)
		{
		    nums[i] = Integer.parseInt(str[i]);
		    total += nums[i];
		}

		
		if (n < 3)
		{
			System.out.println(total);
			return;
		}
		
		
        Codechef obj = new Codechef();
        Codechef.SegmentTree s = new Codechef().new SegmentTree();
        
        s.Build(n);
		
		for (int i = 0; i < 3; i++)
		{
			s.Update(i, nums[i]);
		}
		
		for (int i = 3; i < n; i++)
		{
			long current = s.Query(i-3, i-1) + nums[i];
			s.Update(i, current);
		}
		
		long sum = s.Query(n-3, n-1);
		System.out.println(total - sum);
		} 
		catch(Exception e) 
		{
		    return;
		} 
		
	}
	
	public class SegmentTree
	{
		int n;
		long[] st;
		public void Build(int _n)
		{
			n = _n;
			st = new long[4*n];
			Arrays.fill(st, Long.MAX_VALUE);
		}
		
		public void Update(int index, long value)
		{
			Update(0, n-1, index, value, 0);
		}
		
		public void Update(int start, int end, int index, long value, int node)
		{
			if (start == end)
			{
				st[node] = value;
				return;
			}
			
			int mid = start + (end-start)/2;
			
			if (index >= start && index <= mid)
			{
				Update(start, mid, index, value, 2*node+1);
			}
			else
			{
				Update(mid+1, end, index, value, 2*node+2);
			}
			
			st[node] = Math.min(st[2*node+1], st[2*node+2]);
		}
		
		public long Query(int l, int r)
		{
			return Query(0, n-1, 0, l, r);
		}
		
		public long Query(int start, int end, int node, int l, int r)
		{
			if (r < start || l > end || l > r)
				return Long.MAX_VALUE;
			
			if (l <= start && r >= end)
				return st[node];
			
			int mid = start + (end-start)/2;
			
			long q1 = Query(start, mid, 2*node+1, l, r);
			long q2 = Query(mid+1, end, 2*node+2, l, r);
			
			return Math.min(q1, q2);
		}
	}
}
